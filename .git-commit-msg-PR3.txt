feat(utils): PR3 — Utilities for determinism and scheduling helpers

Successfully implemented PR3 — Utilities for determinism and scheduling helpers. All
  requirements have been met:

  Added to trainer/utils.py:

  1. seed_all(seed: int) - Simple RNG seeding for PyTorch, NumPy, and Python random
  2. count_samples_in_batch(batch) - Batch size detection with default heuristics for tensors,
  tuples, lists, and dicts
  3. balanced_interleave(quota: list[int]) - Credit-based algorithm for even spacing sequences
  4. ddp_is_primary(fabric) - Check if current process is rank 0
  5. ddp_barrier(fabric) - Synchronization barrier (no-op in single-process)
  6. ddp_broadcast_object(fabric, obj, src=0) - Broadcast object from source rank
  7. Stopwatch class - Simple timing utility with lap support
  8. get_memory_usage() - Memory statistics for GPU and CPU

  Created comprehensive unit tests:

  - test_trainer_utils.py with test classes for all new utilities
  - Tests for balanced_interleave and seed_all as required
  - Additional tests for all other utilities

  Updated exports:

  - Added all new utilities to trainer/__init__.py
  - Added exports to main package __init__.py

  Key design decisions:

  - DDP helpers gracefully handle single-process mode (no-ops)
  - balanced_interleave uses credit-based algorithm for fair distribution
  - seed_all is simpler than existing ensure_reproducible (no determinism config)
  - Stopwatch is independent of PerformanceMonitor for modularity
