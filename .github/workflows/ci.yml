name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run with debug logging'
        required: false
        default: false

env:
  PYTHON_DEFAULT_VERSION: "3.12"

jobs:
  # ===== Code Quality Checks =====
  code-quality:
    name: Code Quality (Ruff)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          pyproject.toml

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff

    - name: Cache Ruff
      uses: actions/cache@v4
      with:
        path: ~/.cache/ruff
        key: ruff-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ruff-${{ runner.os }}-

    - name: Run Ruff linter
      run: |
        echo "::group::Ruff Check"
        ruff check . --output-format=github
        echo "::endgroup::"

    - name: Run Ruff formatter (check only)
      run: |
        echo "::group::Ruff Format Check"
        ruff format . --check --diff
        echo "::endgroup::"

  # ===== Type Checking =====
  type-check:
    name: Type Checking (MyPy)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Cache MyPy
      uses: actions/cache@v4
      with:
        path: .mypy_cache
        key: mypy-${{ runner.os }}-python3.12-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          mypy-${{ runner.os }}-python3.12-

    - name: Run MyPy
      run: |
        echo "::group::Type Checking"
        mypy model_training_framework/ --install-types --non-interactive || true
        echo "::endgroup::"

  # ===== Testing =====
  test:
    name: Test (Python 3.12, Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install dependencies
      run: |
        echo "::group::Installing Dependencies"
        python -m pip install --upgrade pip
        echo "Python version:"
        python --version
        echo "Pip version:"
        pip --version
        echo ""
        echo "Installing package in editable mode with dev dependencies..."
        pip install -e ".[dev]" -vv
        echo ""
        echo "Installed packages:"
        pip list
        echo "::endgroup::"

    - name: Cache pytest
      uses: actions/cache@v4
      with:
        path: .pytest_cache
        key: pytest-${{ runner.os }}-python3.12-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          pytest-${{ runner.os }}-python3.12-

    - name: Debug test environment
      run: |
        echo "::group::Debug Test Environment"
        echo "Current directory:"
        pwd
        echo ""
        echo "Directory structure:"
        ls -la
        echo ""
        echo "Model training framework directory:"
        ls -la model_training_framework/
        echo ""
        echo "Tests directory:"
        ls -la model_training_framework/tests/
        echo ""
        echo "Test files found:"
        find model_training_framework/tests -name "test_*.py" -type f
        echo ""
        echo "Python path:"
        python -c "import sys; print('\n'.join(sys.path))"
        echo ""
        echo "Can import package?"
        python -c "import model_training_framework; print('Success'); print('Package location:', model_training_framework.__file__)"
        echo ""
        echo "Pytest version:"
        python -m pytest --version
        echo "::endgroup::"

    - name: Run tests
      run: |
        echo "::group::Running Tests"
        # Show test collection first
        echo "Collecting tests..."
        python -m pytest model_training_framework/tests --collect-only -q | head -20
        echo ""
        echo "Running tests with very verbose output..."
        # Run tests with explicit path and very verbose output
        python -m pytest model_training_framework/tests -vv --tb=short --cov=model_training_framework --cov-report=xml --cov-report=term-missing --log-cli-level=DEBUG
        echo "::endgroup::"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # ===== Security Checks =====
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run Bandit security linter
      run: |
        echo "::group::Security Scan (Bandit)"
        bandit -r model_training_framework/ -f json -o bandit-report.json || true
        bandit -r model_training_framework/ -f txt || true
        echo "::endgroup::"

    - name: Run Safety check
      run: |
        echo "::group::Dependency Security Check (Safety)"
        safety check --json --output safety-report.json || true
        safety check || true
        echo "::endgroup::"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ===== Package Build =====
  build:
    name: Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, test]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools-scm

    - name: Build package
      run: |
        echo "::group::Building Package"
        python -m build
        echo "::endgroup::"

    - name: Check package
      run: |
        echo "::group::Package Check"
        python -m twine check dist/*
        echo "::endgroup::"

    - name: Test package installation
      run: |
        echo "::group::Test Installation"
        pip install dist/*.whl
        python -c "import model_training_framework; print('Package imported successfully')"
        echo "::endgroup::"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-dist
        path: dist/

  # ===== Documentation Build =====
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Build documentation
      run: |
        echo "::group::Building Documentation"
        # Add documentation build commands here when docs are set up
        echo "Documentation build placeholder - add sphinx-build when docs are ready"
        echo "::endgroup::"

  # ===== Integration Check =====
  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [code-quality, type-check, test, security, build]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-dist
        path: dist/

    - name: Install package from wheel
      run: |
        pip install dist/*.whl[all]

    - name: Run integration tests
      run: |
        echo "::group::Integration Tests"
        # Add integration test commands here
        python -c "
        import model_training_framework
        print('✓ Package imports successfully')

        # Test basic functionality
        from model_training_framework.config import ConfigManager
        print('✓ Config module imports successfully')

        from model_training_framework.trainer import TrainerConfig
        print('✓ Trainer module imports successfully')

        print('✓ All integration tests passed')
        "
        echo "::endgroup::"

  # ===== Deployment (on main branch) =====
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-dist
        path: dist/

    - name: Publish to TestPyPI
      if: github.repository_owner == 'your-org'  # Replace with actual org
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true

  # ===== Summary =====
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [code-quality, type-check, test, security, build, docs]
    if: always()

    steps:
    - name: Check all jobs
      run: |
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Type Check: ${{ needs.type-check.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Docs: ${{ needs.docs.result }}"

        if [[ "${{ needs.code-quality.result }}" == "success" && \
              "${{ needs.type-check.result }}" == "success" && \
              "${{ needs.test.result }}" == "success" && \
              "${{ needs.security.result }}" == "success" && \
              "${{ needs.build.result }}" == "success" && \
              "${{ needs.docs.result }}" == "success" ]]; then
          echo "✅ All CI checks passed!"
          exit 0
        else
          echo "❌ Some CI checks failed!"
          exit 1
        fi
